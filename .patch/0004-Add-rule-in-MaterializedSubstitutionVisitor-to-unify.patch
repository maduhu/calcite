From 2d031d14d23810291377d92dc5ef2eaa515d35b7 Mon Sep 17 00:00:00 2001
From: Amogh Margoor <amoghm@qubole.com>
Date: Wed, 30 Mar 2016 15:09:55 -0400
Subject: [PATCH 04/13] Add rule in MaterializedSubstitutionVisitor to unify
 Filter and Filter on Project

---
 .../plan/MaterializedViewSubstitutionVisitor.java  | 89 ++++++++++++++++------
 .../apache/calcite/plan/SubstitutionVisitor.java   |  2 +-
 .../calcite/plan/volcano/VolcanoPlanner.java       |  9 ++-
 3 files changed, 75 insertions(+), 25 deletions(-)

diff --git a/core/src/main/java/org/apache/calcite/plan/MaterializedViewSubstitutionVisitor.java b/core/src/main/java/org/apache/calcite/plan/MaterializedViewSubstitutionVisitor.java
index 9a95c49..840a91c 100644
--- a/core/src/main/java/org/apache/calcite/plan/MaterializedViewSubstitutionVisitor.java
+++ b/core/src/main/java/org/apache/calcite/plan/MaterializedViewSubstitutionVisitor.java
@@ -18,6 +18,7 @@
 
 import org.apache.calcite.rel.RelNode;
 import org.apache.calcite.rel.type.RelDataTypeField;
+import org.apache.calcite.rex.RexExecutorImpl;
 import org.apache.calcite.rex.RexInputRef;
 import org.apache.calcite.rex.RexNode;
 import org.apache.calcite.rex.RexShuttle;
@@ -34,6 +35,7 @@
       ImmutableList.<UnifyRule>builder()
           .addAll(DEFAULT_RULES)
           .add(ProjectToProjectUnifyRule1.INSTANCE)
+          .add(FilterToProjectOnFilterUnifyRule.INSTANCE)
           .build();
 
   public MaterializedViewSubstitutionVisitor(RelNode target_, RelNode query_) {
@@ -109,35 +111,76 @@ private ProjectToProjectUnifyRule1() {
       }
       return null;
     }
+  }
 
-    private RexNode transformRex(RexNode node,
-        final List<RelDataTypeField> oldFields,
-        final List<RelDataTypeField> newFields) {
-      List<RexNode> nodes =
-          transformRex(ImmutableList.of(node), oldFields, newFields);
-      return nodes.get(0);
+  /** Implementation of {@link UnifyRule} that matches a {@link MutableFilter}
+   * on a {@link org.apache.calcite.rel.core.TableScan}
+   * to a {@link MutableProject} on a {@link MutableFilter}
+   * on a {@link org.apache.calcite.rel.core.TableScan}. */
+  private static class FilterToProjectOnFilterUnifyRule extends AbstractUnifyRule {
+    public static final FilterToProjectOnFilterUnifyRule INSTANCE =
+        new FilterToProjectOnFilterUnifyRule();
+
+    private FilterToProjectOnFilterUnifyRule() {
+      super(operand(MutableFilter.class, query(0)),
+          operand(MutableProject.class,
+              operand(MutableFilter.class, target(0))), 1);
     }
 
-    private List<RexNode> transformRex(
-        List<RexNode> nodes,
-        final List<RelDataTypeField> oldFields,
-        final List<RelDataTypeField> newFields) {
-      RexShuttle shuttle = new RexShuttle() {
-        @Override public RexNode visitInputRef(RexInputRef ref) {
-          RelDataTypeField f = oldFields.get(ref.getIndex());
-          for (int index = 0; index < newFields.size(); index++) {
-            RelDataTypeField newf = newFields.get(index);
-            if (f.getKey().equals(newf.getKey())
-                && f.getValue() == newf.getValue()) {
-              return new RexInputRef(index, f.getValue());
-            }
-          }
-          throw MatchFailed.INSTANCE;
+    public UnifyResult apply(UnifyRuleCall call) {
+      final MutableRel rel0 = call.query;
+      final MutableRel rel = ((MutableProject) call.target).getInput();
+      RexExecutorImpl rexImpl =
+          (RexExecutorImpl) (rel.cluster.getPlanner().getExecutor());
+      RexImplicationChecker rexImplicationChecker = new RexImplicationChecker(
+          rel.cluster.getRexBuilder(),
+          rexImpl, rel.getRowType());
+
+      if (rexImplicationChecker.implies(((MutableFilter) rel0).getCondition(),
+          ((MutableFilter) rel).getCondition())) {
+        RexNode newCondition;
+        try {
+          newCondition = transformRex(((MutableFilter) call.query).getCondition(),
+              call.query.getRowType().getFieldList(),
+              call.target.getRowType().getFieldList());
+        } catch (MatchFailed e) {
+          return null;
         }
-      };
-      return shuttle.apply(nodes);
+        final MutableFilter newFilter = MutableFilter.of(call.target, newCondition);
+        return call.result(newFilter);
+      } else {
+        return null;
+      }
     }
   }
+
+  private static RexNode transformRex(RexNode node,
+                                      final List<RelDataTypeField> oldFields,
+                                      final List<RelDataTypeField> newFields) {
+    List<RexNode> nodes =
+        transformRex(ImmutableList.of(node), oldFields, newFields);
+    return nodes.get(0);
+  }
+
+  private static List<RexNode> transformRex(
+      List<RexNode> nodes,
+      final List<RelDataTypeField> oldFields,
+      final List<RelDataTypeField> newFields) {
+    RexShuttle shuttle = new RexShuttle() {
+      @Override public RexNode visitInputRef(RexInputRef ref) {
+        RelDataTypeField f = oldFields.get(ref.getIndex());
+        for (int index = 0; index < newFields.size(); index++) {
+          RelDataTypeField newf = newFields.get(index);
+          if (f.getKey().equals(newf.getKey())
+              && f.getValue() == newf.getValue()) {
+            return new RexInputRef(index, f.getValue());
+          }
+        }
+        throw MatchFailed.INSTANCE;
+      }
+    };
+    return shuttle.apply(nodes);
+  }
 }
 
 // End MaterializedViewSubstitutionVisitor.java
diff --git a/core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java b/core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java
index 6aa935b..bd722b2 100644
--- a/core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java
+++ b/core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java
@@ -1609,7 +1609,7 @@ static MutableScan of(TableScan rel) {
     @Override public boolean equals(Object obj) {
       return obj == this
           || obj instanceof MutableScan
-          && rel == ((MutableScan) obj).rel;
+          && rel.equals(((MutableScan) obj).rel);
     }
 
     @Override public int hashCode() {
diff --git a/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java b/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java
index ceeef8f..c6ad293 100644
--- a/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java
+++ b/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java
@@ -272,6 +272,9 @@
   private final SetMultimap<String, Class> ruleNames =
       LinkedHashMultimap.create();
 
+  private final List<RelOptMaterialization> applicableMaterializations =
+      Lists.newArrayList();
+
   //~ Constructors -----------------------------------------------------------
 
   /**
@@ -476,7 +479,7 @@ private void useApplicableMaterializations() {
     final Graphs.FrozenGraph<List<String>, DefaultEdge> frozenGraph =
         Graphs.makeImmutable(usesGraph);
     final Set<RelOptTable> queryTables = findTables(originalRoot);
-    final List<RelOptMaterialization> applicableMaterializations = Lists.newArrayList();
+    applicableMaterializations.clear();
     for (List<String> qname : TopologicalOrderIterator.of(usesGraph)) {
       RelOptMaterialization materialization = qnameMap.get(qname);
       if (materialization != null
@@ -1878,6 +1881,10 @@ public long getRelMetadataTimestamp(RelNode rel) {
     }
   }
 
+  public List<RelOptMaterialization> getApplicableMaterializations() {
+    return applicableMaterializations;
+  }
+
   /**
    * Normalizes references to subsets within the string representation of a
    * plan.
-- 
2.5.4 (Apple Git-61)

