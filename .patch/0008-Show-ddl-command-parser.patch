From 21dda62068f65640ffdff364d0fb5d8d83b56a37 Mon Sep 17 00:00:00 2001
From: Adeshr <adeshr@qubole.com>
Date: Tue, 3 May 2016 08:27:51 -0400
Subject: [PATCH 08/13] Show ddl command parser

---
 core/src/main/codegen/templates/Parser.jj          | 36 ++++++++
 .../java/org/apache/calcite/sql/SqlShowQuark.java  | 99 ++++++++++++++++++++++
 2 files changed, 135 insertions(+)
 create mode 100644 core/src/main/java/org/apache/calcite/sql/SqlShowQuark.java

diff --git a/core/src/main/codegen/templates/Parser.jj b/core/src/main/codegen/templates/Parser.jj
index 5bf08dc..8cc54b1 100644
--- a/core/src/main/codegen/templates/Parser.jj
+++ b/core/src/main/codegen/templates/Parser.jj
@@ -80,6 +80,7 @@ import org.apache.calcite.sql.SqlSampleSpec;
 import org.apache.calcite.sql.SqlSelect;
 import org.apache.calcite.sql.SqlSelectKeyword;
 import org.apache.calcite.sql.SqlSetOption;
+import org.apache.calcite.sql.SqlShowQuark;
 import org.apache.calcite.sql.SqlTimeLiteral;
 import org.apache.calcite.sql.SqlTimestampLiteral;
 import org.apache.calcite.sql.SqlUnnestOperator;
@@ -955,6 +956,8 @@ SqlNode SqlStmt() :
         stmt = SqlAlterQuarkView()
         |
         stmt = SqlDropQuarkView()
+        |
+        stmt = SqlShowQuark()
 
       <#-- Add methods to parse additional statements here -->
       <#list parser.statementParserMethods as method>
@@ -1505,6 +1508,38 @@ SqlNode SqlDropQuarkView() :
 }
 
 /**
+ * Parses a SHOW DDL statement.
+ */
+SqlNode SqlShowQuark() :
+{
+    SqlNode condition;
+    SqlParserPos pos;
+    SqlIdentifier quarkEntity;
+}
+{
+    <SHOW>
+    {
+        pos = getPos();
+    }
+    (
+        <DATASOURCE>
+        {
+            quarkEntity = new SqlIdentifier("DATASOURCE", getPos());
+        }
+        |
+        <VIEW>
+        {
+            quarkEntity = new SqlIdentifier("VIEW", getPos());
+        }
+    )
+    condition = WhereOpt()
+    {
+        return new SqlShowQuark(pos, quarkEntity, condition);
+    }
+}
+
+
+/**
  * Parses a MERGE statement.
  */
 SqlNode SqlMerge() :
@@ -5340,6 +5375,7 @@ SqlPostfixOperator PostfixRowOperator() :
     | < SESSION_USER: "SESSION_USER" >
     | < SET: "SET" >
     | < SETS: "SETS" >
+    | < SHOW: "SHOW" >
     | < SIMILAR: "SIMILAR" >
     | < SIMPLE: "SIMPLE" >
     | < SIZE: "SIZE" >
diff --git a/core/src/main/java/org/apache/calcite/sql/SqlShowQuark.java b/core/src/main/java/org/apache/calcite/sql/SqlShowQuark.java
new file mode 100644
index 0000000..32fa289
--- /dev/null
+++ b/core/src/main/java/org/apache/calcite/sql/SqlShowQuark.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to you under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.calcite.sql;
+
+import org.apache.calcite.sql.parser.SqlParserPos;
+import org.apache.calcite.sql.validate.SqlValidator;
+import org.apache.calcite.sql.validate.SqlValidatorScope;
+import org.apache.calcite.util.ImmutableNullableList;
+
+import java.util.List;
+
+/**
+ * Created by adeshr on 5/3/16.
+ */
+public class SqlShowQuark extends SqlCall {
+  SqlSpecialOperator operator;
+  String operatorString;
+  SqlIdentifier quarkEntity;
+
+  SqlNode condition;
+
+  //~ Constructors -----------------------------------------------------------
+
+  public SqlShowQuark(
+      SqlParserPos pos,
+      SqlIdentifier quarkEntity,
+      SqlNode condition) {
+    super(pos);
+    this.quarkEntity = quarkEntity;
+    operator = new SqlSpecialOperator("SHOW_" + quarkEntity.toString(), SqlKind.OTHER_DDL);
+    operatorString = "SHOW " + this.quarkEntity.toString();
+    this.condition = condition;
+  }
+
+  //~ Methods ----------------------------------------------------------------
+
+  @Override public SqlKind getKind() {
+    return SqlKind.OTHER_DDL;
+  }
+
+  public SqlOperator getOperator() {
+    return operator;
+  }
+
+  public List<SqlNode> getOperandList() {
+    return ImmutableNullableList.of(condition);
+  }
+
+  @Override public void setOperand(int i, SqlNode operand) {
+    switch (i) {
+    case 0:
+      condition = operand;
+      break;
+    default:
+      throw new AssertionError(i);
+    }
+  }
+
+  /**
+   * Gets the filter condition for rows to be deleted.
+   *
+   * @return the condition expression for the data to be deleted, or null for
+   * all rows in the table
+   */
+  public SqlNode getCondition() {
+    return condition;
+  }
+
+  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {
+    final SqlWriter.Frame frame =
+        writer.startList(SqlWriter.FrameTypeEnum.SELECT, operatorString, "");
+    final int opLeft = getOperator().getLeftPrec();
+    final int opRight = getOperator().getRightPrec();
+    if (condition != null) {
+      writer.sep("WHERE");
+      condition.unparse(writer, opLeft, opRight);
+    }
+    writer.endList(frame);
+  }
+
+  public void validate(SqlValidator validator, SqlValidatorScope scope) {
+    throw new UnsupportedOperationException("Validation not supported for Quark's DDL");
+  }
+}
+// End SqlShowQuark.java
-- 
2.5.4 (Apple Git-61)

